stages:
  - build
  - deploy

# Set variables for GitLab's container registry
variables:
  FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend:latest
  BACKEND_IMAGE: $CI_REGISTRY_IMAGE/backend:latest

# Authenticate with GitLab's container registry
before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY --password-stdin

# Build and push the frontend image
frontend-build:
  stage: build
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  command: ["--privileged"]
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock    
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker build -t $FRONTEND_IMAGE ./frontend
    - docker push $FRONTEND_IMAGE
  only:
    - main

# Build and push the backend image
backend-build:
  stage: build
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  command: ["--privileged"]
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
      
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
    EMAIL_USER: ${EMAIL_USER}
  script:
    - docker build -t $BACKEND_IMAGE ./backend
    - docker push $BACKEND_IMAGE
    - echo "email user ${EMAIL_USER}"
  only:
    - main

# Deployment Step
deploy:
  stage: deploy
  image: docker:20.10.7
  script:    
    # Ensure SSH directory and decode SSH key securely
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - chmod 700 ~/.ssh

    # Debugging - Check the permissions and existence of the SSH key
    - ls -la ~/.ssh
    - cat ~/.ssh/id_rsa

    # Ensure the host's SSH fingerprint is trusted
    - ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

    # Debugging - Test SSH connection
    - ssh -vvv $SSH_USER@$SSH_HOST

    # Deploy services    
    - ssh $SSH_USER@$SSH_HOST "mkdir -p $WORK_DIR && cd $WORK_DIR && git pull origin main && docker-compose down && docker-compose up -d --build"

  only:
    - main
