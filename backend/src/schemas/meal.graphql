scalar Upload

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: String!
  isActive: Boolean!
  isVerified: Boolean!
}

type Ingredient {
  name: String
  measure: String
}

type Category {
  idCategory: String
  strCategory: String!
  strCategoryThumb: String 
}

type Area {
  strArea: String!
}

type Meal {
  id: ID
  name: String!
  category: String!
  ingredients: [Ingredient!]!
  tags: [String]
  area: String
  youtubeLink: String
  image: String
  description: String
  user: User!
  isActive: Boolean
}

 type Image {    
    filename: String!
  }

input IngredientInput {
  name: String
  measure: String
}

input MealInput {
  name: String
  category: String
  ingredients: [IngredientInput]
  tags: [String]
  area: String
  youtubeLink: String
  image: String
  description: String
  userId: ID
  isActive: Boolean
}

type DeleteMealResponse {
  success: Boolean!
  message: String
  mealId: ID
}

type Query {
  user(id: ID!): User
  users(limit: Int, offset: Int): [User!]!
  meals: [Meal!]!
  mealById(id: ID!): Meal
  mealByName(name: String!): Meal
  mealsByCategory(category: String!): [Meal!]!
  mealsByArea(area: String!): [Meal!]!
  mealsByCategoryUser(category: String!, userId: ID!): [Meal!]!
  categoriesByUser(userId: ID!): [Category!]!  
  categories: [Category!]!
  ingredients: [String!]!
  areas: [Area!]!  
}

type Mutation {
  addMeal(input: MealInput): Meal
  updateMeal(id: ID, input: MealInput): Meal
  deleteMeal(id: ID): DeleteMealResponse
  uploadImage(image: Upload!): Image
}

