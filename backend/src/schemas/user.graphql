type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: String!
  isActive: Boolean!
  isVerified: Boolean!
}

type AuthPayload {
  token: String!
  user: User!
}

input UserInput {
  name: String!
  email: String!
  password: String!
  confirmPassword: String!
  role: String!
  isActive: Boolean!
  isVerified: Boolean!
}

input LoginInput {
  email: String!      # Email is required
  password: String!   # Password is required
}

extend type Query {
  user(id: ID!): User
  users(limit: Int, offset: Int): [User!]!
}

extend type Mutation {
  signup(input: UserInput!): User

  login(input: LoginInput!): AuthPayload!
}